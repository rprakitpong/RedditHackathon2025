/**
 * Debounce a function. Wraps a function, ensuring it's only called after it
 * hasn't been called for a certain amount of time.
 * @param callback Function to call
 * @param delayArg Delay in milliseconds, or a function that returns the delay
 */
export function debounce(callback, delayArg) {
    let timeout;
    const retval = (...args) => {
        if (timeout) {
            clearTimeout(timeout);
            timeout = undefined;
        }
        const delay = typeof delayArg === 'function' ? delayArg(...args) : delayArg;
        timeout = setTimeout(() => {
            timeout = undefined;
            callback(...args);
        }, delay);
    };
    retval.clear = () => {
        if (timeout) {
            clearTimeout(timeout);
            timeout = undefined;
        }
    };
    return retval;
}
