/**
 * #app_health.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseCheckHealthRequest() {
    return { appName: "", appVersion: "" };
}
export const CheckHealthRequest = {
    $type: "devvit.gateway.utils.v1alpha.CheckHealthRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appName !== "") {
            writer.uint32(10).string(message.appName);
        }
        if (message.appVersion !== "") {
            writer.uint32(18).string(message.appVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckHealthRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.appVersion !== "") {
            obj.appVersion = message.appVersion;
        }
        return obj;
    },
    create(base) {
        return CheckHealthRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCheckHealthRequest();
        message.appName = object.appName ?? "";
        message.appVersion = object.appVersion ?? "";
        return message;
    },
};
messageTypeRegistry.set(CheckHealthRequest.$type, CheckHealthRequest);
function createBaseCheckHealthResponse() {
    return { healthScore: undefined };
}
export const CheckHealthResponse = {
    $type: "devvit.gateway.utils.v1alpha.CheckHealthResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.healthScore !== undefined) {
            writer.uint32(13).float(message.healthScore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckHealthResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.healthScore = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { healthScore: isSet(object.healthScore) ? globalThis.Number(object.healthScore) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.healthScore !== undefined) {
            obj.healthScore = message.healthScore;
        }
        return obj;
    },
    create(base) {
        return CheckHealthResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCheckHealthResponse();
        message.healthScore = object.healthScore ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(CheckHealthResponse.$type, CheckHealthResponse);
export const AppHealthServiceName = "devvit.gateway.utils.v1alpha.AppHealth";
export class AppHealthClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || AppHealthServiceName;
        this.rpc = rpc;
        this.CheckHealth = this.CheckHealth.bind(this);
    }
    CheckHealth(request, metadata) {
        const data = CheckHealthRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CheckHealth", data, metadata);
        return promise.then((data) => CheckHealthResponse.decode(_m0.Reader.create(data)));
    }
}
export const AppHealthDefinition = {
    name: "AppHealth",
    fullName: "devvit.gateway.utils.v1alpha.AppHealth",
    methods: {
        checkHealth: {
            name: "CheckHealth",
            requestType: CheckHealthRequest,
            requestStream: false,
            responseType: CheckHealthResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
