/**
 * #app_health.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
export interface CheckHealthRequest {
    appName: string;
    appVersion: string;
}
export interface CheckHealthResponse {
    healthScore?: number | undefined;
}
export declare const CheckHealthRequest: {
    $type: "devvit.gateway.utils.v1alpha.CheckHealthRequest";
    encode(message: CheckHealthRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckHealthRequest;
    fromJSON(object: any): CheckHealthRequest;
    toJSON(message: CheckHealthRequest): unknown;
    create(base?: DeepPartial<CheckHealthRequest>): CheckHealthRequest;
    fromPartial(object: DeepPartial<CheckHealthRequest>): CheckHealthRequest;
};
export declare const CheckHealthResponse: {
    $type: "devvit.gateway.utils.v1alpha.CheckHealthResponse";
    encode(message: CheckHealthResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckHealthResponse;
    fromJSON(object: any): CheckHealthResponse;
    toJSON(message: CheckHealthResponse): unknown;
    create(base?: DeepPartial<CheckHealthResponse>): CheckHealthResponse;
    fromPartial(object: DeepPartial<CheckHealthResponse>): CheckHealthResponse;
};
export interface AppHealth {
    CheckHealth(request: CheckHealthRequest, metadata?: Metadata): Promise<CheckHealthResponse>;
}
export declare const AppHealthServiceName = "devvit.gateway.utils.v1alpha.AppHealth";
export declare class AppHealthClientImpl implements AppHealth {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CheckHealth(request: CheckHealthRequest, metadata?: Metadata): Promise<CheckHealthResponse>;
}
export type AppHealthDefinition = typeof AppHealthDefinition;
export declare const AppHealthDefinition: {
    readonly name: "AppHealth";
    readonly fullName: "devvit.gateway.utils.v1alpha.AppHealth";
    readonly methods: {
        readonly checkHealth: {
            readonly name: "CheckHealth";
            readonly requestType: {
                $type: "devvit.gateway.utils.v1alpha.CheckHealthRequest";
                encode(message: CheckHealthRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CheckHealthRequest;
                fromJSON(object: any): CheckHealthRequest;
                toJSON(message: CheckHealthRequest): unknown;
                create(base?: DeepPartial<CheckHealthRequest>): CheckHealthRequest;
                fromPartial(object: DeepPartial<CheckHealthRequest>): CheckHealthRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gateway.utils.v1alpha.CheckHealthResponse";
                encode(message: CheckHealthResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CheckHealthResponse;
                fromJSON(object: any): CheckHealthResponse;
                toJSON(message: CheckHealthResponse): unknown;
                create(base?: DeepPartial<CheckHealthResponse>): CheckHealthResponse;
                fromPartial(object: DeepPartial<CheckHealthResponse>): CheckHealthResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=app_health.d.ts.map