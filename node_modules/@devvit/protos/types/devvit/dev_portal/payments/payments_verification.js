/**
 * #payments_verification.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
/**
 * The verification status of a devvit developer. This shows whether or not a user can receive payments
 * and their state in the verification flow. See design doc here:
 * https://docs.google.com/document/d/1HuAfNB_26jnNu7gGDHk-vafzgpnoNaFqHoumE2C40cA/edit?tab=t.0#bookmark=id.hm6xb18pqjvh
 */
export var PaymentsVerificationStatus;
(function (PaymentsVerificationStatus) {
    PaymentsVerificationStatus[PaymentsVerificationStatus["UNKNOWN"] = 0] = "UNKNOWN";
    /** VERIFICATION_NOT_STARTED - User has not begun the verification process and is permitted to. */
    PaymentsVerificationStatus[PaymentsVerificationStatus["VERIFICATION_NOT_STARTED"] = 1] = "VERIFICATION_NOT_STARTED";
    /** VERIFICATION_PENDING - User has begun the verification process. */
    PaymentsVerificationStatus[PaymentsVerificationStatus["VERIFICATION_PENDING"] = 2] = "VERIFICATION_PENDING";
    /**
     * VERIFICATION_CAN_NOT_START - User is not eligible to receive payments. This may be because they're ineligible to apply for payments
     * or because they applied and were rejected.
     */
    PaymentsVerificationStatus[PaymentsVerificationStatus["VERIFICATION_CAN_NOT_START"] = 3] = "VERIFICATION_CAN_NOT_START";
    /** VERIFICATION_SUCCESS - Verification has been completed and the user is able to receive payments. */
    PaymentsVerificationStatus[PaymentsVerificationStatus["VERIFICATION_SUCCESS"] = 4] = "VERIFICATION_SUCCESS";
    PaymentsVerificationStatus[PaymentsVerificationStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PaymentsVerificationStatus || (PaymentsVerificationStatus = {}));
export function paymentsVerificationStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return PaymentsVerificationStatus.UNKNOWN;
        case 1:
        case "VERIFICATION_NOT_STARTED":
            return PaymentsVerificationStatus.VERIFICATION_NOT_STARTED;
        case 2:
        case "VERIFICATION_PENDING":
            return PaymentsVerificationStatus.VERIFICATION_PENDING;
        case 3:
        case "VERIFICATION_CAN_NOT_START":
            return PaymentsVerificationStatus.VERIFICATION_CAN_NOT_START;
        case 4:
        case "VERIFICATION_SUCCESS":
            return PaymentsVerificationStatus.VERIFICATION_SUCCESS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PaymentsVerificationStatus.UNRECOGNIZED;
    }
}
export function paymentsVerificationStatusToJSON(object) {
    switch (object) {
        case PaymentsVerificationStatus.UNKNOWN:
            return 0;
        case PaymentsVerificationStatus.VERIFICATION_NOT_STARTED:
            return 1;
        case PaymentsVerificationStatus.VERIFICATION_PENDING:
            return 2;
        case PaymentsVerificationStatus.VERIFICATION_CAN_NOT_START:
            return 3;
        case PaymentsVerificationStatus.VERIFICATION_SUCCESS:
            return 4;
        case PaymentsVerificationStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseGetPaymentsVerificationStatusRequest() {
    return {};
}
export const GetPaymentsVerificationStatusRequest = {
    $type: "devvit.dev_portal.payments.GetPaymentsVerificationStatusRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPaymentsVerificationStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetPaymentsVerificationStatusRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetPaymentsVerificationStatusRequest();
        return message;
    },
};
messageTypeRegistry.set(GetPaymentsVerificationStatusRequest.$type, GetPaymentsVerificationStatusRequest);
function createBaseGetPaymentsVerificationStatusResponse() {
    return { status: 0 };
}
export const GetPaymentsVerificationStatusResponse = {
    $type: "devvit.dev_portal.payments.GetPaymentsVerificationStatusResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPaymentsVerificationStatusResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? paymentsVerificationStatusFromJSON(object.status) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = paymentsVerificationStatusToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return GetPaymentsVerificationStatusResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPaymentsVerificationStatusResponse();
        message.status = object.status ?? 0;
        return message;
    },
};
messageTypeRegistry.set(GetPaymentsVerificationStatusResponse.$type, GetPaymentsVerificationStatusResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
