/**
 * #fullscreen.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** Sent to launch a fullscreen WebView experience */
export interface WebViewFullScreenVisibilityEffect {
    /** True if app wants to show the WebView, false if the app wants to close an open WebView */
    show: boolean;
    /** URL to load in the fullscreen WebView */
    url: string;
    /**
     * ID to associate with the newly created WebView. Although only one can be visible at a time,
     * it's possible for an app to define multiple fullscreen WebViews to launch at various times.
     * In order to route messages back and forth between the correct WebView on the client and the
     * associated callbacks within the app we need a stable identifier.
     */
    id: string;
}
export declare const WebViewFullScreenVisibilityEffect: {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewFullScreenVisibilityEffect";
    encode(message: WebViewFullScreenVisibilityEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewFullScreenVisibilityEffect;
    fromJSON(object: any): WebViewFullScreenVisibilityEffect;
    toJSON(message: WebViewFullScreenVisibilityEffect): unknown;
    create(base?: DeepPartial<WebViewFullScreenVisibilityEffect>): WebViewFullScreenVisibilityEffect;
    fromPartial(object: DeepPartial<WebViewFullScreenVisibilityEffect>): WebViewFullScreenVisibilityEffect;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=fullscreen.d.ts.map