/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { KeyRequest, SetRequest, KeysRequest, ExistsResponse, RenameRequest, RenameResponse, IncrByRequest, HSetRequest, HGetRequest, HMGetRequest, RedisValues, RedisFieldValues, HDelRequest, HScanRequest, HScanResponse, KeysResponse, HIncrByRequest, HSetNXRequest, HSetNXResponse, TransactionId, TransactionResponses, WatchRequest, KeyRangeRequest, SetRangeRequest, KeyValuesRequest, ExpireRequest, ZAddRequest, ZRangeRequest, ZMembers, ZRemRequest, ZRemRangeByLexRequest, ZRemRangeByRankRequest, ZRemRangeByScoreRequest, ZScoreRequest, ZRankRequest, ZIncrByRequest, ZScanRequest, ZScanResponse, BitfieldRequest, BitfieldResponse } from './redisapi.js';
import { StringValue, BytesValue, Int64Value, DoubleValue } from '../../../google/protobuf/wrappers.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface RedisAPITwirp<T extends TwirpContext = TwirpContext> {
    Get(ctx: T, request: KeyRequest): Promise<StringValue>;
    GetBytes(ctx: T, request: KeyRequest): Promise<BytesValue>;
    Set(ctx: T, request: SetRequest): Promise<StringValue>;
    Exists(ctx: T, request: KeysRequest): Promise<ExistsResponse>;
    Del(ctx: T, request: KeysRequest): Promise<Int64Value>;
    Type(ctx: T, request: KeyRequest): Promise<StringValue>;
    Rename(ctx: T, request: RenameRequest): Promise<RenameResponse>;
    IncrBy(ctx: T, request: IncrByRequest): Promise<Int64Value>;
    HSet(ctx: T, request: HSetRequest): Promise<Int64Value>;
    HGet(ctx: T, request: HGetRequest): Promise<StringValue>;
    HMGet(ctx: T, request: HMGetRequest): Promise<RedisValues>;
    HGetAll(ctx: T, request: KeyRequest): Promise<RedisFieldValues>;
    HDel(ctx: T, request: HDelRequest): Promise<Int64Value>;
    HScan(ctx: T, request: HScanRequest): Promise<HScanResponse>;
    HKeys(ctx: T, request: KeyRequest): Promise<KeysResponse>;
    HIncrBy(ctx: T, request: HIncrByRequest): Promise<Int64Value>;
    HLen(ctx: T, request: KeyRequest): Promise<Int64Value>;
    HSetNX(ctx: T, request: HSetNXRequest): Promise<HSetNXResponse>;
    Multi(ctx: T, request: TransactionId): Promise<Empty>;
    Exec(ctx: T, request: TransactionId): Promise<TransactionResponses>;
    Discard(ctx: T, request: TransactionId): Promise<Empty>;
    Watch(ctx: T, request: WatchRequest): Promise<TransactionId>;
    Unwatch(ctx: T, request: TransactionId): Promise<Empty>;
    GetRange(ctx: T, request: KeyRangeRequest): Promise<StringValue>;
    SetRange(ctx: T, request: SetRangeRequest): Promise<Int64Value>;
    Strlen(ctx: T, request: KeyRequest): Promise<Int64Value>;
    MGet(ctx: T, request: KeysRequest): Promise<RedisValues>;
    MSet(ctx: T, request: KeyValuesRequest): Promise<Empty>;
    Expire(ctx: T, request: ExpireRequest): Promise<Empty>;
    ExpireTime(ctx: T, request: KeyRequest): Promise<Int64Value>;
    ZAdd(ctx: T, request: ZAddRequest): Promise<Int64Value>;
    ZCard(ctx: T, request: KeyRequest): Promise<Int64Value>;
    ZRange(ctx: T, request: ZRangeRequest): Promise<ZMembers>;
    ZRem(ctx: T, request: ZRemRequest): Promise<Int64Value>;
    ZRemRangeByLex(ctx: T, request: ZRemRangeByLexRequest): Promise<Int64Value>;
    ZRemRangeByRank(ctx: T, request: ZRemRangeByRankRequest): Promise<Int64Value>;
    ZRemRangeByScore(ctx: T, request: ZRemRangeByScoreRequest): Promise<Int64Value>;
    ZScore(ctx: T, request: ZScoreRequest): Promise<DoubleValue>;
    ZRank(ctx: T, request: ZRankRequest): Promise<Int64Value>;
    ZIncrBy(ctx: T, request: ZIncrByRequest): Promise<DoubleValue>;
    ZScan(ctx: T, request: ZScanRequest): Promise<ZScanResponse>;
    Bitfield(ctx: T, request: BitfieldRequest): Promise<BitfieldResponse>;
}
export declare enum RedisAPIMethod {
    Get = "Get",
    GetBytes = "GetBytes",
    Set = "Set",
    Exists = "Exists",
    Del = "Del",
    Type = "Type",
    Rename = "Rename",
    IncrBy = "IncrBy",
    HSet = "HSet",
    HGet = "HGet",
    HMGet = "HMGet",
    HGetAll = "HGetAll",
    HDel = "HDel",
    HScan = "HScan",
    HKeys = "HKeys",
    HIncrBy = "HIncrBy",
    HLen = "HLen",
    HSetNX = "HSetNX",
    Multi = "Multi",
    Exec = "Exec",
    Discard = "Discard",
    Watch = "Watch",
    Unwatch = "Unwatch",
    GetRange = "GetRange",
    SetRange = "SetRange",
    Strlen = "Strlen",
    MGet = "MGet",
    MSet = "MSet",
    Expire = "Expire",
    ExpireTime = "ExpireTime",
    ZAdd = "ZAdd",
    ZCard = "ZCard",
    ZRange = "ZRange",
    ZRem = "ZRem",
    ZRemRangeByLex = "ZRemRangeByLex",
    ZRemRangeByRank = "ZRemRangeByRank",
    ZRemRangeByScore = "ZRemRangeByScore",
    ZScore = "ZScore",
    ZRank = "ZRank",
    ZIncrBy = "ZIncrBy",
    ZScan = "ZScan",
    Bitfield = "Bitfield"
}
export declare const RedisAPIMethodList: RedisAPIMethod[];
export declare function createRedisAPIServer<T extends TwirpContext = TwirpContext>(service: RedisAPITwirp<T>): TwirpServer<RedisAPITwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=redisapi.twirp.d.ts.map